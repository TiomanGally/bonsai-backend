# Spring Application
spring.application.name=bonsai
spring.main.banner-mode=off
server.port=8123
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=100MB
# Application Configuration
bonsai.ui.link=http://localhost:4200
bonsai.backend.link=http://localhost:${server.port}
bonsai.root-directory-for-data=/bonsai
bonsai.pictures.store-pictures-in-database=false
bonsai.weather.cache.interval=120
bonsai.weather.api-key=3e90951884ef29d4ad3f81df351090c8
bonsai.weather.api-url=https://api.openweathermap.org/data/2.5/weather
bonsai.weather.lat=48.6616311
bonsai.weather.long=9.2236805
# Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/bonsai
spring.datasource.username=bonsai
spring.datasource.password=bonsai
# Flyway
flyway.user=bonsai
flyway.password=bonsai
flyway.url=${spring.datasource.url}
flyway.locations=db/migration
# Spring Resource Server
#logging.level.org.springframework.security=DEBUG
spring.security.oauth2.client.registration.bonsai.client-id=bonsai-pkce-client
# When setting the issuer URI, I encountered an issue leading into an error
# because the iss (issuer) claim in the JWT must match exactly the issuer-uri defined in the application.
# As the oAuth2 Client is an angular app running on each resource owners system keycloak returns localhost as the issuer.
# Spring Security enforces this check to ensure that tokens are only accepted from the expected authorization server,
# preventing token substitution attacks.
# To resolve this, I use the jwk-set-uri property instead, as it only verifies that the document is signed by the authorization server,
# without enforcing domain validation.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://bonsai-keycloak:8080/realms/bonsai/protocol/openid-connect/certs